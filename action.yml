name: 'Terraform Steps for deploying using Terraform Cloud'
description: 'Run Terraform plan from PRs and Terraform plan/apply from `main`'
inputs:
  tf-api-token:
    description: 'The Terraform Cloud API token to use. Please use GitHub Secrets to store this value.'
    required: true
  working-directory:  
    description: 'The directory where the Terraform configuration is located.'
    required: true
    default: .
  terraform-version:
    description: 'The Terraform version to use'
    required: true
    default: '1.3.7'
  GITHUB_TOKEN: 
    description: 'The secrets.GITHUB_TOKEN so that the action can create a comment on the PR'
    required: true

branding:
  icon: 'code'
  color: 'green'

runs:
  using: "composite"

  steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}
        cli_config_credentials_token: ${{ inputs.tf-api-token }}
        terraform_wrapper: false
      
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    # Validates the Terraform files
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -input=false -no-color
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      continue-on-error: true
    
    # Shows the execution plan for Terraform in PR
    - name: Update Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Checks if the Terraform plan has failed
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash

    # Applies the Terraform plan
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -no-color
      working-directory: ${{ inputs.working-directory }}
      shell: bash
    
    # Shows the Terraform output
    - name: Terraform output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform output
      working-directory: ${{ inputs.working-directory }}
      shell: bash